import os
from encryption_local import *
from code_secret_fn import *

pwd = get_pwd()

# cette fonction renvoie la version décrypte du code bancaire
def get_code_decoded():
    f = open("bank_code.txt", "r")
    read = f.read()
    return decode_crypto(pwd, read)

# cette fonction permet à l'utilisateur de modifier son code dans le fichier,
# tout en cryptant le code en fonction de son code secret
# pour des raisons de sécurité
def change_bank_code():
    f = open("bank_code.txt", "w")
    print("insert bank code: ")
    user_input = input()
    temp = encode_crypto(pwd, user_input)
    f.write(temp)

# cette fonction renvoie la version décryptée du fichier
# en fonction du code secret
def show_decoded():
    temp = get_code_decoded()
    print(temp)
    return temp

# cette fonction vérifie si le fichier est vide pour qu'un
# code soit créé, et si un code existe déjà,
# la fonction retourne une version décryptée du fichier
# et si le fichier bank_code.txt n'existe pas,
# le code créera automatiquement un fichier txt avec le nom bank_code
def user_bank_code():
    f = open("bank_code.txt", "r")
    read = f.read()
    if os.stat("bank_code.txt").st_size == 0:
        change_bank_code()
    else:
        pass
    valid_user_input = False
    user_input = input('what is your secret code?')
    while valid_user_input == False:
        c = open("code_secret.txt", "r")
        read_c = c.read()
        if hashing(user_input) == read_c:
            decoded = decode_crypto(read_c, read)
            print('your code is', decoded)
            valid_user_input = True
            c.close()
        elif user_input.lower() == 'exit':
            print('exited')
            valid_user_input = True
        else:
            print('that is not your secret code')
            user_input = input('Try again')


    f.close()



